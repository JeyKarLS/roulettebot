import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import FSInputFile, InputMediaPhoto
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import sqlite3
import random
import os

ADMINS = [858127740, 891023107]

PRIZES = [
    {"name": "–°–æ–≤–µ—Ç –¥–Ω—è", "weight": 0.90, "action": None, "image_path": "media/pictures/—Å–æ–≤–µ—Ç–¥–Ω—è.jpg", "caption": "üí°–°–æ–≤–µ—Ç –¥–Ω—è\n—Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É–π —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ", "url": None, "requires_email": False},
    {"name": "–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ –æ–±–æ–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω", "weight": 0.80, "action": None, "image_path": "media/pictures/–∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ –æ–±–æ–∏.jpg", "caption": "–∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ –æ–±–æ–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω", "url": "https://drive.google.com/drive/folders/1UBqX7121hr5ZYop2kFshcXWa3Go6BcNj", "requires_email": False},
    {"name": "–ù–∞–±–æ—Ä –∏–¥–µ–π –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è", "weight": 0.70, "action": None, "image_path": "media/pictures/–Ω–∞–±–æ—Ä –∏–¥–µ–π.jpg", "caption": None, "url": "https://drive.google.com/drive/folders/1ww0nxkWFyS9jDUHktjO4nQMADLbxDLoR", "requires_email": False},
    {"name": "–ö–∞–Ω–∞–ª —Å –º—É–∑—ã–∫–æ–π –±–µ–∑ –ê–ü", "weight": 0.70, "action": None, "image_path": "media/pictures/–∫–∞–Ω–∞–ª —Å –º—É–∑—ã–∫–æ–π.jpg", "caption": None, "url": "https://t.me/music_for_video", "requires_email": False},
    {"name": "–ì–∞–π–¥ –ø–æ –º–æ–±–∏–ª—å–Ω–æ–π —Å—ä–µ–º–∫–µ", "weight": 0.70, "action": None, "image_path": "media/pictures/–≥–∞–π–¥ –ø–æ –º–æ–±–∏–ª—å–Ω–æ–π —Å—å—ë–º–∫–µ.jpg", "caption": None, "url": "https://drive.google.com/drive/folders/1YJ3EI7qL2s_5drVKRsI_f-R4ocZWt_Zx", "requires_email": False},
    {"name": "–ì–∞–π–¥ –ø–æ –æ—Å–µ–Ω–Ω–µ–π —ç—Å—Ç–µ—Ç–∏–∫–µ", "weight": 0.60, "action": None, "image_path": "media/pictures/–≥–∞–π–¥ –ø–æ –æ—Å–µ–Ω–Ω–µ–π —ç—Å—Ç–µ—Ç–∏–∫–µ.jpg", "caption": None, "url": "https://drive.google.com/drive/folders/1SYIqBAH5kuVR6NuwqWgSWcJu2ODecreM", "requires_email": False},
    {"name": "–ö–∞—Ä—Ç–∞ HomePass 30% –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ç PULSE", "weight": 0.40, "action": None, "image_path": "media/pictures/–∫–∞—Ä—Ç HomePas30.jpg", "caption": "üí≥ 30% —Å–∫–∏–¥–∫–∏ –Ω–∞ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç PULSE –¥–æ 31.12.2025", "url": None, "requires_email": True},
    {"name": "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –õ–∏—Ç—Ä–µ—Å –Ω–∞ 300 —Ä—É–±–ª–µ–π", "weight": 0.20, "action": None, "image_path": "media/pictures/–õ–∏—Ç—Ä–µ—Å—Å.jpg", "caption": "üí≥ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –õ–∏—Ç—Ä–µ—Å –Ω–∞ 300 —Ä—É–± (–∞—É–¥–∏–æ –∫–Ω–∏–≥–∏)", "url": None, "requires_email": True},
    {"name": "–†–∞–∑–±–æ—Ä –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ª—é–±–æ–π —Å–æ—Ü.—Å–µ—Ç–∏", "weight": 0.20, "action": None, "image_path": "media/pictures/—Ä–∞–∑–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.jpg", "caption": "üë• –ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç —Ç–≤–æ–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø–æ–¥–∞—á–∏ –¥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∏–¥–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö/—Ñ–∞–π–ª–∞", "url": "https://t.me/solnikos", "requires_email": False},
    {"name": "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –õ—ç—Ç—É–∞–ª—å –Ω–∞ 500 —Ä—É–±–ª–µ–π", "weight": 0.10, "action": None, "image_path": "media/pictures/—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ª–µ—Ç—É–∞–ª—å.jpg", "caption": "üí≥ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –õ—ç—Ç—É–∞–ª—å –Ω–∞ 500 —Ä—É–±–ª–µ–π", "url": None, "requires_email": True},
    {"name": "–ë–∏–∑–Ω–µ—Å - –∑–∞–≤—Ç—Ä–∞–∫", "weight": 0.10, "action": None, "image_path": "media/pictures/–±–∏–∑–Ω–µ—Å –∑–∞–≤—Ç—Ä–∞–∫.jpg", "caption": "‚òïÔ∏è 2-—Ö —á–∞—Å–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç work - life –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏", "spoiler": "–ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ", "url": "https://t.me/solnikos", "requires_email": False},
    {"name": "–ë–æ–Ω—É—Å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ", "weight": 0.05, "action": "spin", "image_path": "media/pictures/–±–æ–Ω—É—Å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ.jpg", "caption": "üé∞ –¢–µ–±–µ –≤—ã–ø–∞–ª–æ +1 –≤—Ä–∞—â–µ–Ω–∏–µ", "url": None, "requires_email": False}
]

# PRIZES defined later after database setup

API_TOKEN = os.environ.get('API_TOKEN')
if not API_TOKEN:
    raise ValueError("API_TOKEN environment variable is required")
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

class PrizeStates(StatesGroup):
    waiting_for_email = State()

class AdminStates(StatesGroup):
    waiting_for_give_spins = State()
    waiting_for_broadcast = State()
    waiting_for_search_user = State()
    waiting_for_add_prize = State()
    waiting_for_edit_prize = State()

conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        spins_count INTEGER DEFAULT 0,
        referred_by INTEGER,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        username TEXT,
        wins_money INTEGER DEFAULT 0,
        wins_spin INTEGER DEFAULT 0,
        wins_rare INTEGER DEFAULT 0,
        wins_bonus INTEGER DEFAULT 0,
        wins_empty INTEGER DEFAULT 0,
        menu_message_id INTEGER
    )
''')
cursor.execute("PRAGMA table_info(users)")
columns = [col[1] for col in cursor.fetchall()]
for col in ['username', 'wins_money', 'wins_spin', 'wins_rare', 'wins_bonus', 'wins_empty', 'menu_message_id']:
    if col not in columns:
        if col in ['wins_money', 'wins_spin', 'wins_rare', 'wins_bonus', 'wins_empty', 'menu_message_id']:
            cursor.execute(f"ALTER TABLE users ADD COLUMN {col} INTEGER DEFAULT 0")
        else:
            cursor.execute(f"ALTER TABLE users ADD COLUMN {col} TEXT")
cursor.execute('''
    CREATE TABLE IF NOT EXISTS promos (
        code TEXT PRIMARY KEY,
        spins INTEGER
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS prize_requests (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        prize_text TEXT,
        email TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS wins_log (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        prize_name TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS prizes (
        id INTEGER PRIMARY KEY,
        name TEXT UNIQUE,
        weight REAL,
        action TEXT,
        image_path TEXT,
        caption TEXT,
        url TEXT,
        requires_email INTEGER
    )
''')
# Insert default prizes if table is empty
cursor.execute("SELECT COUNT(*) FROM prizes")
if cursor.fetchone()[0] == 0:
    for prize in PRIZES:
        cursor.execute('''
            INSERT INTO prizes (name, weight, action, image_path, caption, url, requires_email)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            prize['name'],
            prize['weight'],
            prize.get('action'),
            prize.get('image_path'),
            prize.get('caption'),
            prize.get('url'),
            1 if prize.get('requires_email') else 0
        ))
conn.commit()

def load_prizes():
    cursor.execute("SELECT name, weight, action, image_path, caption, url, requires_email FROM prizes ORDER BY weight DESC")
    rows = cursor.fetchall()
    prizes = []
    for row in rows:
        name, weight, action, image_path, caption, url, requires_email = row
        prize = {
            "name": name,
            "weight": weight,
            "action": action,
            "image_path": image_path,
            "caption": caption,
            "url": url,
            "requires_email": bool(requires_email)
        }
        prizes.append(prize)
    # Add spoiler for specific prize if not in DB
    for prize in prizes:
        if prize["name"] == "–ë–∏–∑–Ω–µ—Å - –∑–∞–≤—Ç—Ä–∞–∫":
            prize["spoiler"] = "–ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ"
    return prizes

PRIZES = load_prizes()

async def get_referral_link(user_id):
    bot_info = await bot.get_me()
    return f"https://t.me/{bot_info.username}?start={user_id}"

def get_main_keyboard(is_admin: bool = False, is_wheel_available: bool = False) -> types.InlineKeyboardMarkup:
    # –ü–æ—Ä—è–¥–æ–∫:
    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (–µ—Å–ª–∏ –∞–¥–º–∏–Ω), –ü—Ä–æ—Ñ–∏–ª—å, –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π, –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–∏–∑—ã, –ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    rows = []
    if is_admin:
        rows.append([types.InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    rows.extend([
        [types.InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],
        [types.InlineKeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="invite_friends")],
        [types.InlineKeyboardButton(text="‚¨ÜÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–∏–∑—ã", callback_data="view_prizes")],
    ])
    if is_wheel_available:
        rows.append([types.InlineKeyboardButton(text="üé∞ –ö–†–£–¢–ò–¢–¨ –ö–û–õ–ï–°–û –§–û–†–¢–£–ù–´", callback_data="spin_wheel")])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=rows)
    return keyboard

async def send_prizes_overview(chat: types.Message | types.CallbackQuery):
    is_admin = (isinstance(chat, types.CallbackQuery) and (chat.from_user.id in ADMINS)) or (isinstance(chat, types.Message) and (chat.from_user.id in ADMINS))
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
    prize_lines = [
        "–°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤:",
        "",
        "1. –°–æ–≤–µ—Ç –¥–Ω—è",
        "2. –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ –æ–±–æ–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω",
        "3. –ù–∞–±–æ—Ä –∏–¥–µ–π –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è",
        "4. –ö–∞–Ω–∞–ª —Å –º—É–∑—ã–∫–æ–π –±–µ–∑ –ê–ü",
        "5. –ì–∞–π–¥ –ø–æ –º–æ–±–∏–ª—å–Ω–æ–π —Å—ä–µ–º–∫–µ",
        "6. –ì–∞–π–¥ –ø–æ –æ—Å–µ–Ω–Ω–µ–π —ç—Å—Ç–µ—Ç–∏–∫–µ",
        "7. –ö–∞—Ä—Ç–∞ HomePass 30% –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ç PULSE",
        "8. –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –õ–∏—Ç—Ä–µ—Å –Ω–∞ 300 —Ä—É–±–ª–µ–π",
        "9. –†–∞–∑–±–æ—Ä –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ª—é–±–æ–π —Å–æ—Ü.—Å–µ—Ç–∏",
        "10. –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –õ—ç—Ç—É–∞–ª—å –Ω–∞ 500 —Ä—É–±–ª–µ–π",
        "11. –ë–∏–∑–Ω–µ—Å - –∑–∞–≤—Ç—Ä–∞–∫",
        "12. –ë–æ–Ω—É—Å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ",
        ""
    ]
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/pulse_lip")],
        [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub_start")]
    ])
    photo = FSInputFile("media/pictures/—Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤.jpg")
    text = "–¢–≤–æ–π –ø—Ä–∏–∑‚Ä¶ –í—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º. –ñ–º–∏, —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!\n\n" + "\n".join(prize_lines)
    user_id = chat.from_user.id if isinstance(chat, types.CallbackQuery) else chat.from_user.id
    cursor.execute("SELECT menu_message_id FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    menu_id = row[0] if row else None

    if isinstance(chat, types.CallbackQuery):
        if menu_id:
            try:
                await bot.edit_message_media(chat_id=chat.message.chat.id, message_id=menu_id, media=InputMediaPhoto(media=photo, caption=text), reply_markup=kb)
            except:
                msg = await chat.message.answer_photo(photo=photo, caption=text, reply_markup=kb)
                cursor.execute("UPDATE users SET menu_message_id=? WHERE user_id=?", (msg.message_id, user_id))
                conn.commit()
        else:
            msg = await chat.message.answer_photo(photo=photo, caption=text, reply_markup=kb)
            cursor.execute("UPDATE users SET menu_message_id=? WHERE user_id=?", (msg.message_id, user_id))
            conn.commit()
    else:
        if menu_id:
            try:
                await bot.edit_message_media(chat_id=chat.chat.id, message_id=menu_id, media=InputMediaPhoto(media=photo, caption=text), reply_markup=kb)
            except:
                msg = await chat.answer_photo(photo=photo, caption=text, reply_markup=kb)
                cursor.execute("UPDATE users SET menu_message_id=? WHERE user_id=?", (msg.message_id, user_id))
                conn.commit()
        else:
            msg = await chat.answer_photo(photo=photo, caption=text, reply_markup=kb)
            cursor.execute("UPDATE users SET menu_message_id=? WHERE user_id=?", (msg.message_id, user_id))
            conn.commit()

@dp.message(Command("start"))
async def cmd_start(message: types.Message, command: Command):
    user_id = message.from_user.id
    referral_id = command.args if command.args else None

    is_new = False
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    if not cursor.fetchone():
        is_new = True
        cursor.execute("INSERT INTO users (user_id, spins_count, referred_by, username) VALUES (?, 0, ?, ?)", (user_id, int(referral_id) if referral_id and referral_id.isdigit() else None, message.from_user.username))
        conn.commit()
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        for admin in ADMINS:
            try:
                await bot.send_message(admin, f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '–ù–µ—Ç'} ID: {user_id}")
            except:
                pass

    # –°–∫—Ä—ã—Ç—å –≤–æ–∑–º–æ–∂–Ω—É—é –æ–±—ã—á–Ω—É—é (reply) –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        rm_msg = await message.answer("‚è≥", reply_markup=types.ReplyKeyboardRemove())
        try:
            await rm_msg.delete()
        except:
            pass
    except:
        pass

    main_keyboard = get_main_keyboard(user_id in ADMINS)
    if is_new and referral_id:
        # Special welcome for referred users
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url="https://t.me/pulse_lip")],
            [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub_start")]
        ])
        await message.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã!\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è –∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!", reply_markup=kb)
    else:
        welcome_kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÜÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–∏–∑—ã", callback_data="view_prizes")]])
        await message.answer_photo(
            photo=FSInputFile("media/welcome/–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–ö–§.jpg"),
            caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã!\n\nüé∞ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è –∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.\n\n–î–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ ‚Äî –ø–æ–ª—É—á–∞–π +1 –≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ!",
            reply_markup=welcome_kb
        )
        # –û—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–∏–∑—ã"

@dp.callback_query(F.data == "spin_wheel")
async def spin_wheel_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # Check subscription
    try:
        member = await bot.get_chat_member(chat_id="@pulse_lip", user_id=user_id)
        if member.status not in ['member', 'administrator', 'creator']:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/pulse_lip")],
                [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub_start")]
            ])
            await callback.message.edit_text("–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø—Ä–æ–≤–µ—Ä—å –ø–æ–¥–ø–∏—Å–∫—É.", reply_markup=kb)
            return
    except:
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/pulse_lip")],
            [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub_start")]
        ])
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=kb)
        return

    cursor.execute("SELECT spins_count FROM users WHERE user_id=?", (user_id,))
    spins = cursor.fetchone()[0]

    if spins <= 0 and user_id not in ADMINS:
        referral_link = await get_referral_link(user_id)
        photo = FSInputFile("media/pictures/–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞–Ω—Å–æ–≤.jpg")
        text = (
            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ¬´—à–∞–Ω—Å–æ–≤¬ª\n\n"
            "–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –¥–∞–¥–∏–º ¬´—à–∞–Ω—Å–æ–≤¬ª.\n\n"
            "–û—Ç–ø—Ä–∞–≤–ª—è–π —Å–≤–æ—é —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º:\n"
            f"{referral_link}\n\n"
            "–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è –ø–æ–¥–ø–∏—à—É—Ç—Å—è —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å ¬´—à–∞–Ω—Å–æ–≤¬ª"
        )
        kb = get_main_keyboard(callback.from_user.id in ADMINS, True)
        # –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        cursor.execute("SELECT menu_message_id FROM users WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        menu_id = row[0] if row else None
        try:
            if menu_id:
                await bot.edit_message_media(chat_id=callback.message.chat.id, message_id=menu_id, media=InputMediaPhoto(media=photo, caption=text), reply_markup=kb)
            else:
                msg = await callback.message.answer_photo(photo=photo, caption=text, reply_markup=kb)
                cursor.execute("UPDATE users SET menu_message_id=? WHERE user_id=?", (msg.message_id, user_id))
                conn.commit()
        except:
            pass
        return

    if user_id not in ADMINS:
        cursor.execute("UPDATE users SET spins_count = spins_count - 1 WHERE user_id=?", (user_id,))
        conn.commit()

    animation = FSInputFile('media/wheel.gif')
    anim_msg = await callback.message.answer_animation(animation)

    await asyncio.sleep(3)

    await anim_msg.delete()

    weights = [p["weight"] for p in PRIZES]
    selected_prize = random.choices(PRIZES, weights=weights, k=1)[0]
    prize_name = selected_prize["name"]
    await callback.message.answer(f"üé° –¢–≤–æ–π –ø—Ä–∏–∑: {prize_name}")

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ (–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –∞–¥–º–∏–Ω–∫–µ)
    try:
        cursor.execute("INSERT INTO wins_log (user_id, prize_name) VALUES (?, ?)", (user_id, prize_name))
        conn.commit()
    except:
        pass

    if selected_prize.get("action") == "spin":
        cursor.execute("UPDATE users SET spins_count = spins_count + 1 WHERE user_id=?", (user_id,))
        conn.commit()
        await callback.message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø–æ–ª—É—á–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ!")

    kb_rows = []
    if selected_prize.get("url"):
        kb_rows.append([types.InlineKeyboardButton(text="–ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫", url=selected_prize["url"])])
    if selected_prize.get("requires_email"):
        kb_rows.append([types.InlineKeyboardButton(text="–£–∫–∞–∂–∏ email", callback_data="enter_email")])
        # –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –æ–Ω–∞ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞—Å—å –≤ –∞–¥–º–∏–Ω–∫–µ
        try:
            cursor.execute("INSERT INTO prize_requests (user_id, prize_text) VALUES (?, ?)", (user_id, prize_name))
            conn.commit()
        except:
            pass
    # Add action buttons
    if callback.from_user.id in ADMINS:
        kb_rows.insert(0, [types.InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    kb_rows.extend([
        [types.InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [types.InlineKeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="invite_friends")],
        [types.InlineKeyboardButton(text="üé∞ –ü–†–û–ö–†–£–¢–ò–¢–¨ –ö–û–õ–ï–°–û –§–û–†–¢–£–ù–´", callback_data="spin_wheel")]
    ])
    kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)

    caption_text = selected_prize.get("caption") or prize_name
    # –ë–µ–∑ HTML-—Å–ø–æ–π–ª–µ—Ä–∞ ‚Äî –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–µ—Ä–∞
    if selected_prize.get("spoiler"):
        caption_text = f"{caption_text}\n\n{selected_prize['spoiler']}"

    if selected_prize.get("image_path"):
        try:
            prize_image = FSInputFile(selected_prize["image_path"])
            await callback.message.answer_photo(photo=prize_image, caption=caption_text, reply_markup=kb)
        except Exception:
            await callback.message.answer(caption_text, reply_markup=kb)
    else:
        await callback.message.answer(caption_text, reply_markup=kb)

    if selected_prize.get("action") == "spin":
        cursor.execute("UPDATE users SET wins_spin = wins_spin + 1 WHERE user_id=?", (user_id,))
    else:
        cursor.execute("UPDATE users SET wins_bonus = wins_bonus + 1 WHERE user_id=?", (user_id,))
        conn.commit()

@dp.callback_query(F.data == "view_prizes")
async def view_prizes(callback: types.CallbackQuery):
    await send_prizes_overview(callback)

@dp.callback_query(F.data == "check_sub_start")
async def check_sub_start(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        member = await bot.get_chat_member(chat_id="@pulse_lip", user_id=user_id)
        if member.status in ['member', 'administrator', 'creator']:
            cursor.execute("UPDATE users SET spins_count = spins_count + 1 WHERE user_id=?", (user_id,))
            conn.commit()
            # Give spin to referrer if exists
            cursor.execute("SELECT referred_by FROM users WHERE user_id=?", (user_id,))
            row = cursor.fetchone()
            if row and row[0]:
                referrer_id = row[0]
                cursor.execute("UPDATE users SET spins_count = spins_count + 1 WHERE user_id=?", (referrer_id,))
                conn.commit()
                try:
                    await bot.send_message(referrer_id, "‚úÖ –¢–≤–æ–π –¥—Ä—É–≥ –ø—Ä–æ–≤–µ—Ä–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª! –¢—ã –ø–æ–ª—É—á–∏–ª +1 —à–∞–Ω—Å.")
                except:
                    pass
            kb = get_main_keyboard(callback.from_user.id in ADMINS, True)
            if callback.message.photo:
                await callback.message.edit_caption("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢—ã –ø–æ–ª—É—á–∏–ª 1 –±–æ–Ω—É—Å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ!\n\nüé∞ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!", reply_markup=kb)
            else:
                await callback.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢—ã –ø–æ–ª—É—á–∏–ª 1 –±–æ–Ω—É—Å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ!\n\nüé∞ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!", reply_markup=kb)
        else:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/pulse_lip")],
                [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub_start")]
            ])
            if callback.message.photo:
                await callback.message.edit_caption("‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø—Ä–æ–≤–µ—Ä—å –ø–æ–¥–ø–∏—Å–∫—É —Å–Ω–æ–≤–∞.", reply_markup=kb)
            else:
                await callback.message.edit_text("‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø—Ä–æ–≤–µ—Ä—å –ø–æ–¥–ø–∏—Å–∫—É —Å–Ω–æ–≤–∞.", reply_markup=kb)
    except:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.")



@dp.callback_query(F.data == "invite_friends")
async def invite_friends_callback(callback: types.CallbackQuery):
    referral_link = await get_referral_link(callback.from_user.id)
    channel_link = "https://t.me/pulse_lip"
    await callback.message.answer(f"üîó –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel_link}, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ {referral_link}\n\nüí° –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–æ—Ç–µ, —Ç—ã –ø–æ–ª—É—á–∏—à—å +1 –≤—Ä–∞—â–µ–Ω–∏–µ!")

@dp.callback_query(F.data == "enter_email")
async def enter_email(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úâÔ∏è –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞.")
    await state.set_state(PrizeStates.waiting_for_email)

@dp.callback_query(F.data == "profile")
async def profile_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ù–µ—Ç"
    cursor.execute("SELECT spins_count, referred_by, created_at, wins_money, wins_spin, wins_rare, wins_bonus, wins_empty FROM users WHERE user_id=?", (user_id,))
    data = cursor.fetchone()
    if data:
        spins, referred_by, created_at, wins_money, wins_spin, wins_rare, wins_bonus, wins_empty = data
        cursor.execute("SELECT COUNT(*) FROM users WHERE referred_by=?", (user_id,))
        invited = cursor.fetchone()[0]
        if referred_by:
            cursor.execute("SELECT username FROM users WHERE user_id=?", (referred_by,))
            referrer_row = cursor.fetchone()
            referred_name = f"@{referrer_row[0]}" if referrer_row and referrer_row[0] else f"ID: {referred_by}"
        else:
            referred_name = "–ù–∏–∫—Ç–æ"
        await callback.message.answer(f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\nüÜî ID: `{user_id}`\nüë§ Username: @{username}\nüé∞ –í—Ä–∞—â–µ–Ω–∏–π: {spins}\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π: {invited}\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü—Ä–∏–≥–ª–∞—à–µ–Ω —Ç–æ–±–æ–π: {referred_name}\nüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at}\n\nüèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥:\nü§ë –î–µ–Ω—å–≥–∏: {wins_money} | üîÑ –°–ø–∏–Ω: {wins_spin} | üíé –†–µ–¥–∫–∏–µ: {wins_rare} | üéâ –ë–æ–Ω—É—Å—ã: {wins_bonus} | üòî –ü—É—Å—Ç–æ: {wins_empty}\n\n‚≠ê –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∫—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ!")
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.callback_query(F.data == "user_stats")
async def user_stats(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("SELECT spins_count, wins_money, wins_spin, wins_rare, wins_bonus, wins_empty FROM users WHERE user_id=?", (user_id,))
    data = cursor.fetchone()
    if data:
        spins, wins_money, wins_spin, wins_rare, wins_bonus, wins_empty = data
        total_wins = wins_money + wins_spin + wins_rare + wins_bonus + wins_empty
        text = f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\nüé∞ –í—Ä–∞—â–µ–Ω–∏–π: {spins}\nüèÜ –í—Å–µ–≥–æ –ø–æ–±–µ–¥: {total_wins}\n\n–ü–æ–¥—Ä–æ–±–Ω–æ:\nü§ë –î–µ–Ω—å–≥–∏: {wins_money}\nüîÑ –°–ø–∏–Ω: {wins_spin}\nüíé –†–µ–¥–∫–∏–µ: {wins_rare}\nüéâ –ë–æ–Ω—É—Å—ã: {wins_bonus}\nüòî –ü—É—Å—Ç–æ: {wins_empty}"
    else:
        text = "‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    await callback.message.answer(text)

@dp.callback_query(F.data == "admin_panel")
async def admin_panel(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMINS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üèÜ –ü—Ä–∏–∑—ã", callback_data="admin_prizes")],
            [types.InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="admin_stats")],
            [types.InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–∑–æ–≤", callback_data="admin_prize_stats")],
            [types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_search_user")],
            [types.InlineKeyboardButton(text="üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞–º–∏", callback_data="admin_manage_prizes")],
            [types.InlineKeyboardButton(text="üéÅ –í—ã–¥–∞—Ç—å —Å–ø–∏–Ω—ã", callback_data="admin_give_spins")],
            [types.InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [types.InlineKeyboardButton(text="üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_top")]
        ]
    )
    await callback.message.answer("üîß **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.callback_query(F.data == "admin_give_spins")
async def admin_give_spins(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMINS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    await callback.message.answer("üéÅ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n\n–ü—Ä–∏–º–µ—Ä: 123456789 5")
    await state.set_state(AdminStates.waiting_for_give_spins)

@dp.callback_query(F.data == "admin_search_user")
async def admin_search_user(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMINS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n–ü—Ä–∏–º–µ—Ä: @username –∏–ª–∏ 123456789")
    await state.set_state(AdminStates.waiting_for_search_user)

@dp.message(AdminStates.waiting_for_search_user)
async def process_search_user(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return
    search = message.text.strip()
    if search.startswith('@'):
        # Search by username
        cursor.execute("SELECT user_id, referred_by, spins_count, created_at, username FROM users WHERE username = ?", (search[1:],))
    else:
        # Search by ID
        try:
            user_id = int(search)
            cursor.execute("SELECT user_id, referred_by, spins_count, created_at, username FROM users WHERE user_id = ?", (user_id,))
        except:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ ID.")
            return
    row = cursor.fetchone()
    if row:
        user_id, referred_by, spins, created, username = row
        user_display = f"@{username}" if username else f"`{user_id}`"
        if referred_by:
            cursor.execute("SELECT username FROM users WHERE user_id=?", (referred_by,))
            referrer_row = cursor.fetchone()
            referrer_display = f"@{referrer_row[0]}" if referrer_row and referrer_row[0] else f"`{referred_by}`"
        else:
            referrer_display = "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        invited_count = cursor.execute("SELECT COUNT(*) FROM users WHERE referred_by=?", (user_id,)).fetchone()[0]
        text = f"üë§ **–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**\n\nüÜî {user_display} | –ü—Ä–∏–≥–ª–∞—à–µ–Ω: {referrer_display} | –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {invited_count} | –í—Ä–∞—â–µ–Ω–∏–π: {spins} | –î–∞—Ç–∞: {created}"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
        await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()
@dp.message(AdminStates.waiting_for_give_spins)
async def process_give_spins(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return
    try:
        user_id, count = message.text.split()
        user_id = int(user_id)
        count = int(count)
        cursor.execute("UPDATE users SET spins_count = spins_count + ? WHERE user_id=?", (count, user_id))
        conn.commit()
        await message.answer(f"‚úÖ –í—ã–¥–∞–Ω–æ {count} –≤—Ä–∞—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üèÜ –ü—Ä–∏–∑—ã", callback_data="admin_prizes")],
                [types.InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
                [types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="admin_stats")],
                [types.InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–∑–æ–≤", callback_data="admin_prize_stats")],
                [types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_search_user")],
                [types.InlineKeyboardButton(text="üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞–º–∏", callback_data="admin_manage_prizes")],
                [types.InlineKeyboardButton(text="üéÅ –í—ã–¥–∞—Ç—å —Å–ø–∏–Ω—ã", callback_data="admin_give_spins")],
                [types.InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
                [types.InlineKeyboardButton(text="üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_top")]
            ]
        )
        await message.answer("üîß **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n\n–ü—Ä–∏–º–µ—Ä: 123456789 5")
    await state.clear()
@dp.callback_query(F.data == "admin_broadcast")
async def admin_broadcast(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMINS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    await callback.message.answer("üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
    await state.set_state(AdminStates.waiting_for_broadcast)

@dp.message(AdminStates.waiting_for_broadcast)
async def process_broadcast(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return
    text = message.text
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    sent = 0
    for uid in users:
        try:
            await bot.send_message(uid[0], text)
            sent += 1
        except:
            pass
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    await state.clear()

@dp.callback_query(F.data == "admin_manage_prizes")
async def admin_manage_prizes(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMINS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑", callback_data="admin_add_prize")],
            [types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–∑", callback_data="admin_edit_prize")],
            [types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–∑", callback_data="admin_delete_prize")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]
    )
    await callback.message.answer("üéÅ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞–º–∏:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
@dp.callback_query(F.data == "admin_prize_stats")
async def admin_prize_stats(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMINS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    cursor.execute("SELECT prize_name, COUNT(*) as count FROM wins_log GROUP BY prize_name ORDER BY count DESC")
    stats = cursor.fetchall()
    text = "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–∑–æ–≤:**\n\n"
    if stats:
        for prize, count in stats:
            text += f"{prize}: {count} —Ä–∞–∑(–∞)\n"
    else:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

@dp.callback_query(F.data == "admin_users")
async def admin_users(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMINS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    cursor.execute("SELECT user_id, referred_by, spins_count, created_at, username FROM users ORDER BY created_at DESC LIMIT 50")
    rows = cursor.fetchall()
    text = "üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):**\n\n"
    for user_id, referred_by, spins, created, username in rows:
        user_display = f"@{username}" if username else f"`{user_id}`"
        if referred_by:
            cursor.execute("SELECT username FROM users WHERE user_id=?", (referred_by,))
            referrer_row = cursor.fetchone()
            referrer_display = f"@{referrer_row[0]}" if referrer_row and referrer_row[0] else f"`{referred_by}`"
        else:
            referrer_display = "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        invited_count = cursor.execute("SELECT COUNT(*) FROM users WHERE referred_by=?", (user_id,)).fetchone()[0]
        text += f"üÜî {user_display} | –ü—Ä–∏–≥–ª–∞—à–µ–Ω: {referrer_display} | –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {invited_count} | –í—Ä–∞—â–µ–Ω–∏–π: {spins} | –î–∞—Ç–∞: {created}\n"
    if not rows:
        text += "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

@dp.callback_query(F.data == "admin_stats")
async def admin_stats(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMINS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]
    cursor.execute("SELECT SUM(spins_count) FROM users")
    total_spins = cursor.fetchone()[0] or 0
    text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\nüé∞ –í—Å–µ–≥–æ –≤—Ä–∞—â–µ–Ω–∏–π: {total_spins}"
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

@dp.callback_query(F.data == "admin_top")
async def admin_top(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMINS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    # –¢–æ–ø –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º
    cursor.execute("SELECT user_id, username, COUNT(referred_by) as invited FROM users LEFT JOIN users u2 ON users.user_id = u2.referred_by GROUP BY user_id ORDER BY invited DESC LIMIT 10")
    top_invited = cursor.fetchall()
    text = "üèÜ **–¢–æ–ø –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º:**\n\n"
    for i, (uid, uname, inv) in enumerate(top_invited, 1):
        display = f"@{uname}" if uname else f"`{uid}`"
        text += f"{i}. {display} - {inv} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π\n"
    # –¢–æ–ø –ø–æ –≤—Ä–∞—â–µ–Ω–∏—è–º
    cursor.execute("SELECT user_id, username, spins_count FROM users ORDER BY spins_count DESC LIMIT 10")
    top_spins = cursor.fetchall()
    text += "\nüèÜ **–¢–æ–ø –ø–æ –≤—Ä–∞—â–µ–Ω–∏—è–º:**\n\n"
    for i, (uid, uname, spins) in enumerate(top_spins, 1):
        display = f"@{uname}" if uname else f"`{uid}`"
        text += f"{i}. {display} - {spins} –≤—Ä–∞—â–µ–Ω–∏–π\n"
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

@dp.callback_query(F.data == "admin_prizes")
async def admin_prizes(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMINS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏
    cursor.execute("SELECT w.user_id, u.username, w.prize_name, w.created_at FROM wins_log w LEFT JOIN users u ON w.user_id = u.user_id ORDER BY w.created_at DESC LIMIT 30")
    wins = cursor.fetchall()
    text = "üèÜ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏:**\n\n"
    if wins:
        for uid, uname, prize, created in wins:
            display = f"@{uname}" if uname else f"`{uid}`"
            text += f"{display} ‚Äî {prize} ‚Äî {created}\n"
    else:
        text += "–ü–æ–∫–∞ –ø—É—Å—Ç–æ.\n"

    # –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø—Ä–∏–∑—ã (email)
    cursor.execute("SELECT user_id, prize_text, email, created_at FROM prize_requests ORDER BY created_at DESC LIMIT 30")
    rows = cursor.fetchall()
    text += "\nüì® **–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø—Ä–∏–∑—ã (email):**\n\n"
    if rows:
        for uid, prize, email, created in rows:
            cursor.execute("SELECT username FROM users WHERE user_id=?", (uid,))
            uname = cursor.fetchone()
            user_display = f"@{uname[0]}" if uname and uname[0] else f"`{uid}`"
            email_str = email if email else "–ù–µ —É–∫–∞–∑–∞–Ω"
            text += f"{user_display} ‚Äî {prize} ‚Äî Email: {email_str} ‚Äî {created}\n"
    else:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤."
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

@dp.message(PrizeStates.waiting_for_email)
async def process_email(message: types.Message, state: FSMContext):
    email = message.text
    user_id = message.from_user.id
    cursor.execute("UPDATE prize_requests SET email=? WHERE user_id=? AND email IS NULL ORDER BY id DESC LIMIT 1", (email, user_id))
    conn.commit()
    await message.answer("‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ê–¥–º–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–∑–∞.")
    # –í–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é (–∫–∞—Ä—Ç–∏–Ω–∫–∞ + –∫–Ω–æ–ø–∫–∏)
    try:
        await send_prizes_overview(message)
    except Exception:
        pass
    await state.clear()

@dp.message(Command("give_spins"))
async def give_spins(message: types.Message, command: Command):
    if message.from_user.id not in ADMINS:
        return
    try:
        user_id, count = command.args.split()
        user_id = int(user_id)
        count = int(count)
        cursor.execute("UPDATE users SET spins_count = spins_count + ? WHERE user_id=?", (count, user_id))
        conn.commit()
        await message.answer(f"‚úÖ –í—ã–¥–∞–Ω–æ {count} –≤—Ä–∞—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_spins <user_id> <count>")

@dp.message(Command("create_promo"))
async def create_promo(message: types.Message, command: Command):
    if message.from_user.id not in ADMINS:
        return
    try:
        code, spins = command.args.split()
        spins = int(spins)
        cursor.execute("INSERT INTO promos (code, spins) VALUES (?, ?)", (code, spins))
        conn.commit()
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —Å–æ–∑–¥–∞–Ω, –¥–∞–µ—Ç {spins} –≤—Ä–∞—â–µ–Ω–∏–π")
    except:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_promo <code> <spins>")

@dp.message(Command("promo"))
async def use_promo(message: types.Message, command: Command):
    user_id = message.from_user.id
    try:
        code = command.args[0]
        cursor.execute("SELECT spins FROM promos WHERE code=?", (code,))
        row = cursor.fetchone()
        if row:
            spins = row[0]
            cursor.execute("UPDATE users SET spins_count = spins_count + ? WHERE user_id=?", (spins, user_id))
            cursor.execute("DELETE FROM promos WHERE code=?", (code,))
            conn.commit()
            await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢—ã –ø–æ–ª—É—á–∏–ª {spins} –≤—Ä–∞—â–µ–Ω–∏–π")
        else:
            await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
    except:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo <code>")

@dp.message(Command("broadcast"))
async def broadcast(message: types.Message, command: Command):
    if message.from_user.id not in ADMINS:
        return
    text = ' '.join(command.args)
    if not text:
        await message.answer("‚ùå –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç")
        return
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    sent = 0
    for uid in users:
        try:
            await bot.send_message(uid[0], text)
            sent += 1
        except:
            pass
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())